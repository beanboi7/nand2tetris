// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Not(in=instruction[15], out=Ainst);
    Not(in=Ainst, out=Cinst); //taking C and A instruction via the MSB of instruction

    And(a=Cinst, b=instruction[5], out=instCtrl); //to load aluout into ARegister when its a C instruction
    Mux16(a=instruction, b=aluout, sel=instCtrl, out=aRegin); 
    
    Or(a=Ainst, b=instCtrl, out=aload); //assert load when either A or C instruction
    ARegister(in=aRegin, load=aload, out=aRegout);
    Mux16(a=aRegout, b=inM, sel=instruction[12], out=AMout); //M value or A instruction
    
    And(a=Cinst, b=instruction[4], out=dload); //Load when its C instruction only into D register
    DRegister(in=aluout, load=dload, out=dRegout);
    
    ALU(x=dRegout, y=AMout, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluout, out=outM, zr=zrout, ng=ngout);

    And(a=Cinst, b=instruction[3], out=writeM); //using MSB of instruction because writeM is asserted only if its a C instruction
    Or16(a=aRegout, b=false, out[0..14]=addressM);

    //positive is !zr and !ng
    Not(in=zrout, out=notZR);
    Not(in=ngout, out=notNG);
    And(a=notZR, b=notNG, out=pos1);
    And(a=pos1, b=instruction[0], out=positive); //positive flag when its not zg and zr asserted

    And(a=positive, b=instruction[0], out=jgt); //JGT
    And(a=zrout, b=instruction[1], out=jeq); //JEQ
    Or(a=jeq, b=jgt, out=jge); //JGE
    Or(a=ngout, b=false, out=jlt); //JLT
    Or(a=positive, b=ngout, out=jne); //JNE
    Or(a=jeq, b=jlt, out=jle); //JLE
    Or(a=ngout, b=zrout, out=jmp1); 
    Or(a=jmp1, b=positive, out=jmp); //JMP
    
    Mux(a=positive, b=jgt, sel=instruction[0], out=jmpA);
    Mux(a=jeq, b=jge, sel=instruction[0], out=jmpB);
    Mux(a=jlt, b=jne, sel=instruction[0], out=jmpC);
    Mux(a=jle, b=jmp, sel=instruction[0], out=jmpD);
    Mux(a=jmpA, b=jmpB, sel=instruction[1], out=jmpE);
    Mux(a=jmpC, b=jmpD, sel=instruction[1], out=jmpF);
    Mux(a=jmpE, b=jmpF, sel=instruction[2], out=jumpLoad);
    
    And(a=Cinst, b=jumpLoad, out=loadPC);
    Not(in=loadPC, out=PCinc); //pc++ only if the load(jump) is not asserted

    PC(in=aRegout, load=loadPC, inc=PCinc, reset=reset, out[0..14]=pc);


    

}